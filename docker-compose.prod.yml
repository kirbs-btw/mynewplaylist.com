version: "3.9"

services:
  db:
    image: pgvector/pgvector:pg16
    container_name: vector-db-prod
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-vectordemo}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3
    # Remove port exposure for security - only internal access

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: vector-backend-prod
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-vectordemo}
      ENVIRONMENT: production
      # Optionally restrict CORS to your domain(s)
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-*}
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
    # Remove port exposure - only accessible through nginx

  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        # Compile-time API base URL for CRA
        REACT_APP_API_URL: ${REACT_APP_API_URL:-/api}
    container_name: vector-frontend-prod
    restart: unless-stopped
    depends_on:
      - backend
    environment:
      - NODE_ENV=production
    networks:
      - app-network
    # Remove port exposure - only accessible through nginx

  nginx:
    image: nginx:alpine
    container_name: vector-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  pgdata:
    driver: local

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 